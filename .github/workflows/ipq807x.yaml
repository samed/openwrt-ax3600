name: Build IPQ807x
on: [push]

jobs:
    build:
        name: Prepare and build IPQ807x generic images
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v2

            - name: Update and install feeds
              run: |
                ./scripts/feeds update -a
                ./scripts/feeds install -a

            - name: Generate config for IPQ807x Generic
              run: |
                echo "CONFIG_TARGET_ipq807x=y" > .config
                echo "CONFIG_TARGET_ipq807x_generic=y\n" >> .config
                echo "CONFIG_TARGET_MULTI_PROFILE=y\n" >> .config
                echo "CONFIG_TARGET_ALL_PROFILES=y\n" >> .config
                echo "CONFIG_TARGET_PER_DEVICE_ROOTFS=y\n" >> .config
                echo "CONFIG_TARGET_ROOTFS_INITRAMFS=y\n" >> .config
                echo "CONFIG_TARGET_INITRAMFS_COMPRESSION_ZSTD=y\n" >> .config
                echo "CONFIG_PACKAGE_luci=y\n" >> .config
                echo "CONFIG_PACKAGE_wpad-basic-wolfssl=m\n" >> .config
                echo "CONFIG_PACKAGE_wpad-wolfssl=y\n" >> .config
                echo "CONFIG_PACKAGE_libwolfssl=n\n" >> .config
                echo "CONFIG_PACKAGE_libwolfssl-cpu-crypto=y\n" >> .config             
                echo "CONFIG_PACKAGE_kmod-qca-nss-dp=y\n" >> .config
                echo "CONFIG_PACKAGE_qca-ssdk-shell=y\n" >> .config
                echo "CONFIG_PACKAGE_nss-firmware-ipq8074=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-wireguard=y\n" >> .config
                echo "CONFIG_PACKAGE_wireguard-tools=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-wireguard=y\n" >> .config
                echo "CONFIG_PACKAGE_htop=y\n" >> .config
                echo "CONFIG_PACKAGE_wpad-mesh-wolfssl=y\n" >> .config
                echo "CONFIG_PACKAGE_iperf3=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-sqm=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-ssl=y\n" >> .config
                echo "CONFIG_PACKAGE_qrencode=y\n" >> .config
                echo "CONFIG_PACKAGE_curl=y\n" >> .config
                echo "CONFIG_PACKAGE_adguardhome=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-theme-openwrt-2020=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-ddns=y\n" >> .config
                echo "CONFIG_PACKAGE_ddns-scripts=y\n" >> .config
                echo "CONFIG_PACKAGE_vpn-policy-routing=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-vpn-policy-routing=y\n" >> .config
                echo "CONFIG_PACKAGE_wireguard-tools=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-wireguard=y\n" >> .config
                echo "CONFIG_PACKAGE_6in4=y\n" >> .config
                echo "CONFIG_PACKAGE_openvpn-wolfssl=y\n" >> .config
                echo "CONFIG_PACKAGE_luci-app-openvpn=y\n" >> .config
                echo "CONFIG_PACKAGE_kmod-tun=y\n" >> .config
                make defconfig

            - name: Download package sources
              run: make download V=s

            - name: Build tools
              run: |
                make tools/install -j$(nproc) V=s || \
                make tools/install V=s

            - name: Build toolchain
              run: |
                make toolchain/install -j$(nproc) V=s || \
                make toolchain/install V=s

            - name: Build target images
              run: |
                make -j$(nproc) V=s || \
                make V=s

            - name: TAR output
              run: tar -cvf ipq807xx-images.tar bin/targets/ipq807x/generic

            - name: Upload artifacts
              uses: actions/upload-artifact@v2
              with:
                name: ipq807x-images
                path: ipq807xx-images.tar

    release:
          name: Make a release
          runs-on: ubuntu-latest
          needs: build

          steps:
            - name: Download the image artifacts
              uses: actions/download-artifact@v2
              with:
                name: ipq807x-images

            - name: Extract the image artifacts
              run: tar xf ipq807xx-images.tar

            - name: Get the current date
              run: echo "NOW=$(date +%F-%H%M)" >> $GITHUB_ENV

            - name: Create a release
              uses: "lauravuo/action-automatic-releases@test-changes"
              with:
                repo_token: "${{ secrets.GITHUB_TOKEN }}"
                prerelease: true
                title: "Updated prebuilt images ${{ env.NOW }}"
                automatic_release_tag: "ipq807x-${{ env.NOW }}"
                auto_generate_release_notes: true
                files: bin/targets/ipq807x/generic/*
